להלן מספר דוגמאות בסיסיות לקוד בשפת C, המכסות נושאים מרכזיים בתכנות. כל דוגמה כוללת הסבר קצר על מטרת הקוד.

### 1\. הדפסת "שלום עולם"

זוהי התוכנית הקלאסית הראשונה שכותבים. היא מדגימה את המבנה הבסיסי של תוכנית C ואת השימוש בפונקציה `printf` להדפסת פלט למסך.

```c
#include <stdio.h>

int main() {
   // הדפסת המחרוזת "שלום עולם" למסך
   printf("שלום עולם!\n");
   return 0;
}
```

  * **`#include <stdio.h>`**: כולל את ספריית הקלט/פלט הסטנדרטית, המאפשרת שימוש בפונקציות כמו `printf`.
  * **`int main()`**: הפונקציה הראשית של התוכנית. ביצוע התוכנית מתחיל תמיד מכאן.
  * **`printf("שלום עולם!\n");`**: הפונקציה שמדפיסה את הטקסט. `\n` הוא תו מעבר שורה.
  * **`return 0;`**: מסמן שהתוכנית הסתיימה בהצלחה.

-----

### 2\. קלט מהמשתמש וחישוב

דוגמה זו מראה כיצד לקבל קלט מספרי מהמשתמש, לאחסן אותו במשתנה ולבצע חישוב פשוט.

```c
#include <stdio.h>

int main() {
   int num1, num2, sum;

   // בקשת קלט מהמשתמש
   printf("הכנס מספר ראשון: ");
   scanf("%d", &num1);

   printf("הכנס מספר שני: ");
   scanf("%d", &num2);

   // חישוב הסכום
   sum = num1 + num2;

   // הדפסת התוצאה
   printf("הסכום הוא: %d\n", sum);
   return 0;
}
```

  * **`int num1, num2, sum;`**: הכרזה על משתנים מסוג **integer** (מספר שלם).
  * **`scanf("%d", &num1);`**: קולטת מספר שלם מהמשתמש ומאחסנת אותו במשתנה `num1`. `&` הוא אופרטור הכתובת, שמעביר לפונקציה את הכתובת של המשתנה.

-----

### 3\. לולאה (loop)

דוגמה המדפיסה את המספרים מ-1 עד 5 באמצעות לולאת `for`. לולאות משמשות לחזרה על קטע קוד.

```c
#include <stdio.h>

int main() {
   int i;

   // לולאת for שתרוץ 5 פעמים
   for (i = 1; i <= 5; i++) {
      printf("המספר הוא: %d\n", i);
   }

   return 0;
}
```

  * **`for (i = 1; i <= 5; i++)`**: מבנה הלולאה:
      * `i = 1`: אתחול המונה.
      * `i <= 5`: תנאי ההמשך (הלולאה תרוץ כל עוד התנאי מתקיים).
      * `i++`: עדכון המונה (הגדלתו ב-1 לאחר כל איטרציה).

-----

### 4\. תנאים (if/else)

דוגמה המקבלת מספר מהמשתמש ובודקת האם הוא חיובי, שלילי או אפס.

```c
#include <stdio.h>

int main() {
   int number;

   // בקשת קלט
   printf("הכנס מספר: ");
   scanf("%d", &number);

   // בדיקת התנאים
   if (number > 0) {
      printf("המספר הוא חיובי.\n");
   } else if (number < 0) {
      printf("המספר הוא שלילי.\n");
   } else {
      printf("המספר הוא אפס.\n");
   }

   return 0;
}
```

  * **`if (number > 0)`**: בדיקת התנאי. אם הוא נכון, הקוד בבלוק הזה יתבצע.
  * **`else if (number < 0)`**: אם התנאי הקודם לא היה נכון, ייבדק תנאי זה.
  * **`else`**: אם אף אחד מהתנאים הקודמים לא התקיים, קוד זה יתבצע.

-----

### 5\. מערכים (arrays)

דוגמה לשימוש במערך לאחסון קבוצת מספרים ולולאה להדפסתם.

```c
#include <stdio.h>

int main() {
   int numbers[5] = {10, 20, 30, 40, 50};
   int i;

   // הדפסת כל איבר במערך
   for (i = 0; i < 5; i++) {
      printf("האיבר במקום %d הוא: %d\n", i, numbers[i]);
   }
   
   return 0;
}
```

  * **`int numbers[5] = {10, 20, 30, 40, 50};`**: הכרזה ואתחול של מערך בגודל 5, המכיל מספרים שלמים.
  * **`numbers[i]`**: גישה לאיבר במערך באמצעות אינדקס (החל מ-0).